// Copyright 2025 Blink Labs Software
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

import (
	"fmt"
	"log/slog"
	"net/http"
	"time"

	_ "github.com/blinklabs-io/vpn-indexer/docs" // docs is generated by Swag CLI
	"github.com/blinklabs-io/vpn-indexer/internal/ca"
	"github.com/blinklabs-io/vpn-indexer/internal/config"
	"github.com/blinklabs-io/vpn-indexer/internal/database"
	httpSwagger "github.com/swaggo/http-swagger"
)

const (
	healthcheckPath = "/healthcheck"
)

type Api struct {
	cfg *config.Config
	db  *database.Database
	ca  *ca.Ca
}

var api *Api

// @title			vpn-indexer
// @version		v0
// @description	NABU VPN indexer API
// @BasePath		/
// @contact.name	Blink Labs Software
// @contact.url	https://blinklabs.io
// @contact.email	support@blinklabs.io
//
// @license.name	Apache 2.0
// @license.url	http://www.apache.org/licenses/LICENSE-2.0.html
func Start(cfg *config.Config, db *database.Database, ca *ca.Ca) error {
	logger := slog.Default()
	logger.Info("initializing API server")

	api = &Api{
		cfg: cfg,
		db:  db,
		ca:  ca,
	}

	//
	// Main HTTP server for API endpoints
	//
	mainMux := http.NewServeMux()

	// Healthcheck
	mainMux.HandleFunc(healthcheckPath, api.handleHealthcheck)

	// Swagger
	mainMux.HandleFunc("/swagger/", httpSwagger.WrapHandler)

	// API routes
	mainMux.HandleFunc("/api/client/list", api.handleClientList)
	mainMux.HandleFunc("/api/client/profile", api.handleClientProfile)
	mainMux.HandleFunc("/api/client/available", api.handleClientAvailable)
	mainMux.HandleFunc("/api/refdata", api.handleRefData)
	mainMux.HandleFunc("/api/tx/signup", api.handleTxSignup)
	mainMux.HandleFunc("/api/tx/renew", api.handleTxRenew)
	mainMux.HandleFunc("/api/tx/submit", api.handleTxSubmit)

	// Wrap the mainMux with a CORS middleware
	mainHandler := api.corsMiddleware(mainMux)

	// Start API server
	logger.Info("starting API listener",
		"address", cfg.Api.ListenAddress,
		"port", cfg.Api.ListenPort,
	)
	server := &http.Server{
		Addr: fmt.Sprintf(
			"%s:%d",
			cfg.Api.ListenAddress,
			cfg.Api.ListenPort,
		),
		Handler:           mainHandler,
		ReadHeaderTimeout: 60 * time.Second,
	}
	err := server.ListenAndServe()
	return err
}

// corsMiddleware adds CORS-related headers to every response
func (a *Api) corsMiddleware(
	next http.Handler,
) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST")
		w.Header().Set("Access-Control-Allow-Headers", "*")
		next.ServeHTTP(w, r)
	})
}

// handleHealthcheck responds to GET /healthcheck
func (*Api) handleHealthcheck(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	_, _ = w.Write([]byte(`{"healthy": true}`))
}
