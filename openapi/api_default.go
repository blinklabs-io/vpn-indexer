/*
vpn-indexer

NABU VPN indexer API

API version: v0
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultAPI interface {

	/*
		ApiClientAvailablePost ClientAvailable

		Check if a client profile is available

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiClientAvailablePostRequest
	*/
	ApiClientAvailablePost(
		ctx context.Context,
	) DefaultAPIApiClientAvailablePostRequest

	// ApiClientAvailablePostExecute executes the request
	//  @return string
	ApiClientAvailablePostExecute(
		r DefaultAPIApiClientAvailablePostRequest,
	) (string, *http.Response, error)

	/*
		ApiClientListPost ClientList

		Search for clients matching a given manager public key hash

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiClientListPostRequest
	*/
	ApiClientListPost(ctx context.Context) DefaultAPIApiClientListPostRequest

	// ApiClientListPostExecute executes the request
	//  @return []ApiClient
	ApiClientListPostExecute(
		r DefaultAPIApiClientListPostRequest,
	) ([]ApiClient, *http.Response, error)

	/*
		ApiClientProfilePost ClientProfile

		Fetch a client VPN profile given a COSE payload via signed S3 link

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiClientProfilePostRequest
	*/
	ApiClientProfilePost(
		ctx context.Context,
	) DefaultAPIApiClientProfilePostRequest

	// ApiClientProfilePostExecute executes the request
	ApiClientProfilePostExecute(
		r DefaultAPIApiClientProfilePostRequest,
	) (*http.Response, error)

	/*
		ApiRefdataGet RefData

		Fetch prices and regions for signup or renewal

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiRefdataGetRequest
	*/
	ApiRefdataGet(ctx context.Context) DefaultAPIApiRefdataGetRequest

	// ApiRefdataGetExecute executes the request
	//  @return ApiRefDataResponse
	ApiRefdataGetExecute(
		r DefaultAPIApiRefdataGetRequest,
	) (*ApiRefDataResponse, *http.Response, error)

	/*
		ApiTxSignupPost TxSignup

		Build a transaction for a VPN signup

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIApiTxSignupPostRequest
	*/
	ApiTxSignupPost(ctx context.Context) DefaultAPIApiTxSignupPostRequest

	// ApiTxSignupPostExecute executes the request
	//  @return ApiTxSignupResponse
	ApiTxSignupPostExecute(
		r DefaultAPIApiTxSignupPostRequest,
	) (*ApiTxSignupResponse, *http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPIApiClientAvailablePostRequest struct {
	ctx                    context.Context
	ApiService             DefaultAPI
	clientAvailableRequest *ApiClientAvailableRequest
}

// Client Available Request
func (r DefaultAPIApiClientAvailablePostRequest) ClientAvailableRequest(
	clientAvailableRequest ApiClientAvailableRequest,
) DefaultAPIApiClientAvailablePostRequest {
	r.clientAvailableRequest = &clientAvailableRequest
	return r
}

func (r DefaultAPIApiClientAvailablePostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ApiClientAvailablePostExecute(r)
}

/*
ApiClientAvailablePost ClientAvailable

# Check if a client profile is available

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiClientAvailablePostRequest
*/
func (a *DefaultAPIService) ApiClientAvailablePost(
	ctx context.Context,
) DefaultAPIApiClientAvailablePostRequest {
	return DefaultAPIApiClientAvailablePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultAPIService) ApiClientAvailablePostExecute(
	r DefaultAPIApiClientAvailablePostRequest,
) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiClientAvailablePost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/client/available"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientAvailableRequest == nil {
		return localVarReturnValue, nil, reportError(
			"clientAvailableRequest is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clientAvailableRequest
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiClientListPostRequest struct {
	ctx               context.Context
	ApiService        DefaultAPI
	clientListRequest *ApiClientListRequest
}

// List Request
func (r DefaultAPIApiClientListPostRequest) ClientListRequest(
	clientListRequest ApiClientListRequest,
) DefaultAPIApiClientListPostRequest {
	r.clientListRequest = &clientListRequest
	return r
}

func (r DefaultAPIApiClientListPostRequest) Execute() ([]ApiClient, *http.Response, error) {
	return r.ApiService.ApiClientListPostExecute(r)
}

/*
ApiClientListPost ClientList

# Search for clients matching a given manager public key hash

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiClientListPostRequest
*/
func (a *DefaultAPIService) ApiClientListPost(
	ctx context.Context,
) DefaultAPIApiClientListPostRequest {
	return DefaultAPIApiClientListPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ApiClient
func (a *DefaultAPIService) ApiClientListPostExecute(
	r DefaultAPIApiClientListPostRequest,
) ([]ApiClient, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ApiClient
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiClientListPost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/client/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientListRequest == nil {
		return localVarReturnValue, nil, reportError(
			"clientListRequest is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clientListRequest
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiClientProfilePostRequest struct {
	ctx                  context.Context
	ApiService           DefaultAPI
	clientProfileRequest *ApiClientProfileRequest
}

// Profile Request
func (r DefaultAPIApiClientProfilePostRequest) ClientProfileRequest(
	clientProfileRequest ApiClientProfileRequest,
) DefaultAPIApiClientProfilePostRequest {
	r.clientProfileRequest = &clientProfileRequest
	return r
}

func (r DefaultAPIApiClientProfilePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiClientProfilePostExecute(r)
}

/*
ApiClientProfilePost ClientProfile

# Fetch a client VPN profile given a COSE payload via signed S3 link

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiClientProfilePostRequest
*/
func (a *DefaultAPIService) ApiClientProfilePost(
	ctx context.Context,
) DefaultAPIApiClientProfilePostRequest {
	return DefaultAPIApiClientProfilePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ApiClientProfilePostExecute(
	r DefaultAPIApiClientProfilePostRequest,
) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiClientProfilePost",
	)
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/client/profile"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientProfileRequest == nil {
		return nil, reportError(
			"clientProfileRequest is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clientProfileRequest
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 302 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIApiRefdataGetRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
}

func (r DefaultAPIApiRefdataGetRequest) Execute() (*ApiRefDataResponse, *http.Response, error) {
	return r.ApiService.ApiRefdataGetExecute(r)
}

/*
ApiRefdataGet RefData

# Fetch prices and regions for signup or renewal

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiRefdataGetRequest
*/
func (a *DefaultAPIService) ApiRefdataGet(
	ctx context.Context,
) DefaultAPIApiRefdataGetRequest {
	return DefaultAPIApiRefdataGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiRefDataResponse
func (a *DefaultAPIService) ApiRefdataGetExecute(
	r DefaultAPIApiRefdataGetRequest,
) (*ApiRefDataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiRefDataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiRefdataGet",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/refdata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIApiTxSignupPostRequest struct {
	ctx             context.Context
	ApiService      DefaultAPI
	txSignupRequest *ApiTxSignupRequest
}

// Signup Request
func (r DefaultAPIApiTxSignupPostRequest) TxSignupRequest(
	txSignupRequest ApiTxSignupRequest,
) DefaultAPIApiTxSignupPostRequest {
	r.txSignupRequest = &txSignupRequest
	return r
}

func (r DefaultAPIApiTxSignupPostRequest) Execute() (*ApiTxSignupResponse, *http.Response, error) {
	return r.ApiService.ApiTxSignupPostExecute(r)
}

/*
ApiTxSignupPost TxSignup

# Build a transaction for a VPN signup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIApiTxSignupPostRequest
*/
func (a *DefaultAPIService) ApiTxSignupPost(
	ctx context.Context,
) DefaultAPIApiTxSignupPostRequest {
	return DefaultAPIApiTxSignupPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiTxSignupResponse
func (a *DefaultAPIService) ApiTxSignupPostExecute(
	r DefaultAPIApiTxSignupPostRequest,
) (*ApiTxSignupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiTxSignupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.ApiTxSignupPost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/api/tx/signup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.txSignupRequest == nil {
		return localVarReturnValue, nil, reportError(
			"txSignupRequest is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.txSignupRequest
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
